# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import imgproc_pb2 as imgproc__pb2


class ImgProcStub(object):
    """proto协议定义说明:
    message: 定义数据结构
    service: 定义接口的名字，入参：message定义的类型，返回值: message定义的类型
    编译生产grpc接口，步骤：
    1. 打开命令窗口，cd 进入 *.proto 目录下，例如：cd E:\workspace\other\grpc\grpc_server\protos
    2. 运行命令： python -m grpc_tools.protoc -I./ --python_out=../  --grpc_python_out=../ ./*.proto
    可以指定编译proto协议生成的调用接口文件目录，例如：输出到目录：grpc_service
    python -m grpc_tools.protoc -I./ --python_out=../grpc_service/  --grpc_python_out=../grpc_service/ ./*.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.do = channel.unary_unary(
                '/order.ImgProc/do',
                request_serializer=imgproc__pb2.ImgProcRequest.SerializeToString,
                response_deserializer=imgproc__pb2.ImgProcReply.FromString,
                )


class ImgProcServicer(object):
    """proto协议定义说明:
    message: 定义数据结构
    service: 定义接口的名字，入参：message定义的类型，返回值: message定义的类型
    编译生产grpc接口，步骤：
    1. 打开命令窗口，cd 进入 *.proto 目录下，例如：cd E:\workspace\other\grpc\grpc_server\protos
    2. 运行命令： python -m grpc_tools.protoc -I./ --python_out=../  --grpc_python_out=../ ./*.proto
    可以指定编译proto协议生成的调用接口文件目录，例如：输出到目录：grpc_service
    python -m grpc_tools.protoc -I./ --python_out=../grpc_service/  --grpc_python_out=../grpc_service/ ./*.proto

    """

    def do(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImgProcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'do': grpc.unary_unary_rpc_method_handler(
                    servicer.do,
                    request_deserializer=imgproc__pb2.ImgProcRequest.FromString,
                    response_serializer=imgproc__pb2.ImgProcReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order.ImgProc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImgProc(object):
    """proto协议定义说明:
    message: 定义数据结构
    service: 定义接口的名字，入参：message定义的类型，返回值: message定义的类型
    编译生产grpc接口，步骤：
    1. 打开命令窗口，cd 进入 *.proto 目录下，例如：cd E:\workspace\other\grpc\grpc_server\protos
    2. 运行命令： python -m grpc_tools.protoc -I./ --python_out=../  --grpc_python_out=../ ./*.proto
    可以指定编译proto协议生成的调用接口文件目录，例如：输出到目录：grpc_service
    python -m grpc_tools.protoc -I./ --python_out=../grpc_service/  --grpc_python_out=../grpc_service/ ./*.proto

    """

    @staticmethod
    def do(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.ImgProc/do',
            imgproc__pb2.ImgProcRequest.SerializeToString,
            imgproc__pb2.ImgProcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
